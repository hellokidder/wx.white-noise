<style lang="less">
.center {
  display: flex;
  justify-content: center;
  align-items: center;
}

.background {
  position: fixed;
  bottom: 0;
  width: 100%;
  height: 100%; 
  // background-image: url('http://localhost:5000/WechatIMG11.png');
  background-image: url('http://img.hb.aicdn.com/919c81c67eadc61e60259cbd5fb386119dd7bf6117ecaa-NZGCl9_fw658');
  background-size: 100% 100%;
}

.markbackground {
  position: fixed;
  bottom: 0;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.top {
  position: fixed;
  bottom: 0;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.mark {
  font-size: 35px;
  color: white;
}

.blank {
  width: 100%;
  height: 10%;
}

.dates {
  color: white;
  border-bottom: 0.5px solid white;
  border-top: 0.5px solid white; // border-radius: 15px;
  // border-left-color: rgba(255, 255, 255, 0);
  // border-right-color: rgba(255, 255, 255, 0);
  margin-top: 5%;
  font-size: 11px;
  font-weight: bold;
}

.circular {
  width: 200px;
  height: 200px;
  border: 2px solid rgba(255, 255, 255, 0.5);
  border-radius: 100px;
}

.buttonview {
  margin-top: 20%;
  color: white;
  width: 100%;
}

.button {
  padding: 4px;
  width: 18%;
  border: 1px solid rgba(255, 255, 255, 0.5);
  border-radius: 20px;
  font-size: 18px;
  font-weight: 100;
}

.txt {
  border: 1px solid white;
  border-radius: 10px;
}

.nongli {
  color: white;
  font-size: 12px;
  margin-top: 20%;
}

.uplow {
  width: 10px;
  height: 10px;
}

.timer {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 0px;
  margin-top: 5%;
  color: white;
  font-size: 18px;
}

.lowertext {
  color: rgba(255, 255, 255, 0.5);
  font-size: 12px;
  position: fixed;
  bottom: 10%;
  font-weight: 100;
  width: 100%;
}

.point {
  width: 15px;
  height: 15px;
}

.lowpoint {
  position: fixed;
  width: 100%;
  bottom: 5%;
}
</style>
<template>
  <view>
    <view wx:if="{{showImge}}">
      <image src="../image/bg.jpeg" class="top"></image>
    </view>
    <view wx:else class="background" @touchstart="touchstart" @touchmove="touchmove" @touchend="touchend">
      <view class="markbackground" style="background-color:{{bgcolor}}">
        <view class="top">
          <view class="blank"></view>
          <view class="circular center" style="background-color:{{circlecolor}};  box-shadow:0px 0px 10px {{shadowcolor}};">
            <view class="center" style="display: flex; flex-direction: column;">
              <view class="mark">
                <text>{{text}}</text>
              </view>
              <view class="dates">
                <text>{{dates}}</text>
              </view>
              <view class="nongli">
                <text>{{lunar}}</text>
              </view>
            </view>
          </view>
          <view class="center timer">
            <view>
              <image src="../image/up.png" class="uplow"></image>
            </view>
            <view wx:if="{{tick === -1}}">
              <text>{{loops}} </text>
            </view>
            <view wx:else>
              <text>{{time}} </text>
            </view>
            <view>
              <image src="../image/low.png" class="uplow"></image>
            </view>
          </view>
          <view wx:if="{{key === 0}}" @tap="time" class="center buttonview">
            <text class="button center">{{kStatus[key]}}</text>
          </view>
          <view wx:else class="center buttonview">
            <view @tap="time" class="button center" style="margin-right: 8%;">
              <text>{{kStatus[key]}}</text>
            </view>
            <view @tap="timerEnd" class="button center" style="margin-left: 8%;">
              <text>{{endKey}}</text>
            </view>
          </view>
          <view class="lowertext center">
            <text>跨过山水，我在这里拥抱你</text>
          </view>
          <view class="lowpoint center">
            <image src="../image/point.png" class="point" style="opacity: {{goldPoint}};"></image>
            <image src="../image/point.png" class="point" style="opacity: {{treePoint}};"></image>
            <image src="../image/point.png" class="point" style="opacity: {{waterPoint}};"></image>
            <image src="../image/point.png" class="point" style="opacity: {{firePoint}};"></image>
            <image src="../image/point.png" class="point" style="opacity: {{soilPoint}};"></image>
          </view>
        </view>
      </view>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy'

const calendar = require('../pages/calendar.js')
const initialTimeText = '20 : 00'
const initialTime = 20
const secondsPerMin = 60
const timeUplimit = 60
const timeLowlimit = 0
const ksStart = 0
const ksPause = 1
const ksContinue = 2
const xPos = 0
const yPos = 1
const changeTimePoint = 1
const changeImagePoint = 5
const GOLD = 'gold'
const TREE = 'tree'
const WATER = 'water'
const FIRE = 'fire'
const SOIL = 'soil'
const noiseGold = 'http://localhost:5000/%E9%92%9F.mp3'
const noiseTree = 'http://localhost:5000/%E6%A3%AE.mp3'
const noiseWater = 'http://localhost:5000/%E9%9B%A8.mp3'
const noiseFire = 'http://localhost:5000/%E7%81%AB.mp3'
const noiseSoil = 'http://localhost:5000/%E6%BD%AE.mp3'
const trueOpacity = 1
const falseOpacity = 0.3
const loop = '∞'

let timer

export default class Index extends wepy.page {
  config = {
    navigationBarTitleText: '归心'
  }
  data = {
    mark: '../image/water.png',
    dates: '',
    lunar: '',
    lunarDay: '',
    showImge: true,
    tick: 0,
    time: '',
    key: ksStart,
    kStatus: ['开始', '暂停', '继续'],
    endKey: '结束',
    touchmove: true,
    changePoint: 0,
    imageNode: WATER,
    bgcolor: 'rgba(0, 255, 255, 0.12)',
    circlecolor: 'rgba(0, 0, 0, 0)',
    starPoint: [0, 0],
    curPoint: [0, 0],
    touches: [0, 0],
    noise: 'http://localhost:5000/雨.mp3',
    text: '雨水',
    shadowcolor: '#333333',
    goldPoint: falseOpacity,
    treePoint: falseOpacity,
    waterPoint: trueOpacity,
    firePoint: falseOpacity,
    soilPoint: falseOpacity,
    loops: loop
  }
  methods = {
    date(self) {
      let date = new Date()
      const weeks = ['Sun', 'Mon', 'Tues', 'Wed', 'Thur', 'Fri', 'Sat']
      const week = date.getUTCDay()
      const weekd = weeks[week]
      const month = date.getMonth()
      const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']
      const mon = months[month]
      const day = date.getDate()
      const year = date.getFullYear()
      self.dates = mon + ' ' + day + ' ' + weekd + ' ' + year
      let lunardate = calendar.solar2lunar(year, month + 1, day)
      const lunarMonths = ['正月', '贰月', '叁月', '肆月', '伍月', '陆月', '七月', '捌月', '玖月', '拾月', '拾壹月', '腊月']
      const lunarDays = ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十']
      if (lunardate.lDay <= 10) {
        self.lunarDay = '初' + lunarDays[lunardate.lDay - 1]
      } else if (lunardate.lDay > 10 && lunardate.lDay < 20) {
        self.lunarDay = '十' + lunarDays[lunardate.lDay - 11]
      } else if (lunardate.lDay > 20 && lunardate.lDay < 30) {
        self.lunarDay = '廿' + lunarDays[lunardate.lDay - 21]
      } else if (lunardate.lDay === 20) {
        self.lunarDay = '二十'
      } else if (lunardate.lDay === 30) {
        self.lunarDay = '三十'
      }
      self.lunar = '农历' + lunarMonths[lunardate.lMonth - 1] + self.lunarDay
    },
    // 判断是否开启计时器
    time() {
      let self = this
      let min = (self.tick - (self.tick % secondsPerMin)) / secondsPerMin
      self.methods.circleColorChange(self)
      self.methods.playnoise(self)
      if (min > timeLowlimit && min <= timeUplimit) {
        self.methods.timer(self, false)
      } else {
        self.methods.timer(self, true)
        console.log('%%%%%%')
      }
    },
    // 计时器
    timer(self, loops) {
      self.touchmove = false
      if (self.key === ksStart || self.key === ksContinue) {
        timer = setInterval(function() {
          if (loops) {
            self.tick = -1
          } else {
            self.tick--
          }
          self.methods.setTime(self, self.tick)
          wepy.getBackgroundAudioPlayerState({
            success: function(res) {
              if (res.status !== 1) {
                self.methods.playnoise(self)
              }
            }
          })
          if (self.tick === timeLowlimit) {
            self.setData({
              touchmove: true,
              circlecolor: 'rgba(0, 0, 0, 0)',
              key: ksStart,
              tick: initialTime * secondsPerMin,
              time: initialTimeText
            })
            wepy.stopBackgroundAudio()
            self.time = initialTimeText
            self.tick = initialTime * secondsPerMin
            self.touchmove = true
            self.circlecolor = 'rgba(0, 0, 0, 0)'
            self.key = ksStart
            clearInterval(timer)
          }
        }, 1000)
        self.key = ksPause
      } else {
        console.log(self.tick)
        wepy.pauseBackgroundAudio()
        self.methods.setTime(self, self.tick)
        clearInterval(timer)
        self.key = ksContinue
        self.circlecolor = 'rgba(255, 255, 0, 0)'
      }
    },
    // 刷新时间
    setTime(self, tick) {
      let currentTime = self.methods.currentTime(self.tick)
      self.setData({
        time: currentTime
      })
      self.time = currentTime
    },
    timerEnd() {
      let self = this
      clearInterval(timer)
      wepy.stopBackgroundAudio()
      self.key = ksStart
      self.tick = initialTime * secondsPerMin
      self.time = initialTimeText
      self.touchmove = true
      self.circlecolor = 'rgba(0, 0, 0, 0)'
      self.shadowcolor = '#333333'
    },
    // 计算时间及输出格式
    currentTime(tick) {
      if (tick < 0) {
        return loop
      } else {
        let min = (tick - (tick % secondsPerMin)) / secondsPerMin
        let sec = tick % secondsPerMin
        if (min > timeUplimit) {
          return loop
        } else {
          if (min < 10) {
            min = '0' + min
          }
          if (sec < 10) {
            sec = '0' + sec
          }
          return min + ' : ' + sec
        }
      }
    },
    touchstart(e) {
      let self = this
      self.starPoint = [e.touches[0].pageX, e.touches[0].pageY]
    },
    touchmove(e) {
      let self = this
      self.curPoint = [e.touches[0].pageX, e.touches[0].pageY]
      self.changePoint++
      if (self.touchmove) {
        self.methods.timeChange(self)
      }
    },
    touchend(e) {
      let self = this
      if (self.touchmove) {
        self.methods.imageChange(self)
      }
    },
    // 上下滑动调节时间
    timeChange(self) {
      let xchange = self.curPoint[xPos] - self.starPoint[xPos]
      let ychange = self.curPoint[yPos] - self.starPoint[yPos]
      if (Math.abs(xchange) < Math.abs(ychange)) {
        if (self.changePoint > changeTimePoint) {
          if (self.curPoint[yPos] > self.starPoint[yPos] && self.tick > 0) {
            self.tick = self.tick - secondsPerMin
            self.methods.setTime(self, self.tick)
            self.changePoint = 0
          }
          if (self.curPoint[yPos] < self.starPoint[yPos]) {
            self.tick = self.tick + secondsPerMin
            self.methods.setTime(self, self.tick)
            self.changePoint = 0
          }
        }
      }
    },
    // 左右滑动调节图片
    imageChange(self) {
      let xchange = self.curPoint[xPos] - self.starPoint[xPos]
      let ychange = self.curPoint[yPos] - self.starPoint[yPos]
      if (Math.abs(xchange) > Math.abs(ychange)) {
        if (self.changePoint > changeImagePoint) {
          if (self.curPoint[xPos] > self.starPoint[xPos]) {
            switch (self.imageNode) {
              case GOLD:
                break
              case TREE:
                self.text = '寺钟'
                self.imageNode = GOLD
                self.bgcolor = 'rgba( 255, 255, 0, 0.12)'
                self.noise = noiseGold
                self.goldPoint = trueOpacity
                self.treePoint = falseOpacity
                break
              case WATER:
                self.text = '森林'
                self.imageNode = TREE
                self.bgcolor = 'rgba( 0, 255, 0, 0.12)'
                self.noise = noiseTree
                self.treePoint = trueOpacity
                self.waterPoint = falseOpacity
                break
              case FIRE:
                self.text = '雨水'
                self.imageNode = WATER
                self.bgcolor = 'rgba(0, 255, 255, 0.12)'
                self.noise = noiseWater
                self.waterPoint = trueOpacity
                self.firePoint = falseOpacity
                break
              case SOIL:
                self.text = '篝火'
                self.imageNode = FIRE
                self.bgcolor = 'rgba( 255, 0, 0, 0.12)'
                self.noise = noiseFire
                self.firePoint = trueOpacity
                self.soilPoint = falseOpacity
                break
            }
            self.changePoint = 0
          } else if (self.curPoint[xPos] < self.starPoint[xPos]) {
            switch (self.imageNode) {
              case GOLD:
                self.text = '森林'
                self.imageNode = TREE
                self.bgcolor = 'rgba( 0, 255, 0, 0.12)'
                self.noise = noiseTree
                self.treePoint = trueOpacity
                self.goldPoint = falseOpacity
                break
              case TREE:
                self.text = '雨水'
                self.imageNode = WATER
                self.bgcolor = 'rgba(0, 255, 255, 0.12)'
                self.noise = noiseWater
                self.waterPoint = trueOpacity
                self.treePoint = falseOpacity
                break
              case WATER:
                self.text = '篝火'
                self.imageNode = FIRE
                self.bgcolor = 'rgba( 255, 0, 0, 0.12)'
                self.noise = noiseFire
                self.firePoint = trueOpacity
                self.waterPoint = falseOpacity
                break
              case FIRE:
                self.text = '浪潮'
                self.imageNode = SOIL
                self.bgcolor = 'rgba( 238, 99, 99, 0.12)'
                self.noise = noiseSoil
                self.soilPoint = trueOpacity
                self.firePoint = falseOpacity
                break
              case SOIL:
                break
            }
            self.changePoint = 0
          }
        }
      }
    },
    playnoise(self) {
      wepy.playBackgroundAudio({
        dataUrl: self.noise
      })
    },
    circleColorChange(self) {
      switch (self.imageNode) {
        case GOLD:
          self.circlecolor = 'rgba( 255, 255, 0, 0.1)'
          self.shadowcolor = 'rgba( 255, 255, 0, 1)'
          break
        case TREE:
          self.circlecolor = 'rgba( 0, 255, 0, 0.1)'
          self.shadowcolor = 'rgba( 0, 255, 0, 1)'
          break
        case WATER:
          self.circlecolor = 'rgba(0, 255, 255, 0.1)'
          self.shadowcolor = 'rgba(0, 255, 255, 1)'
          break
        case FIRE:
          self.circlecolor = 'rgba( 255, 0, 0, 0.1)'
          self.shadowcolor = 'rgba( 255, 0, 0, 1)'
          break
        case SOIL:
          self.circlecolor = 'rgba( 238, 99, 99, 0.1)'
          self.shadowcolor = 'rgba( 238, 99, 99, 1)'
          break
      }
    }
  }
  onShareAppMessage() {
    return {
      title: '归心',
      desc: '都市喧闹 何处归心',
      path: '/page/noise'
    }
  }
  onLoad() {
    let self = this
    self.methods.date(self)
    // self.calendar.solar2lunar()
    setTimeout(() => {
      self.showImge = false
      self.setData({
        showImge: false
      })
    }, 2000)
    self.time = initialTimeText
    self.tick = initialTime * secondsPerMin
  }
}
</script>
