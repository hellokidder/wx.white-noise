<style lang="less">
.position {
  position: fixed;
  bottom: 0;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  background-image: url('https://timgsa.baidu.com/timg?image&quality=80&size=b10000_10000&sec=1507874324&di=35d625e5e928c9af293703f3d4d90732&src=http://img4.duitang.com/uploads/item/201409/09/20140909211122_wWVay.png');
  background-size: 100% 100%;
}

.markposition {
  position: fixed;
  bottom: 0;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.top {
  position: fixed;
  bottom: 0;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.mark {
  width: 80px;
  height: 80px;
}

.text {
  width: 100%;
  height: 10%;
}

.yuan {
  width: 200px;
  height: 200px;
  border: 1px solid white;
  border-radius: 100px;
}

.center {
  display: flex;
  justify-content: center;
  align-items: center;
}

.time {
  color: white;
  border-bottom: 1px solid white;
  border-top: 1px solid white;
  margin-top: 20%;
}

.timefloor {
  margin-top: 7%;
  color: white;
  font-size: 20px;
}

.key {
  margin-top: 38%;
  display: flex;
  flex-direction: row;
  color: white;
  width: 100%; 
}
</style>
<template>
  <view>
    <view wx:if="{{showImg}}">
      <image src="../image/bg.jpeg" class="top"></image>
    </view>
    <view wx:else class="position" @touchstart="touchstart" @touchmove="touchmove" @touchend="touchend">
      <view class="markposition" style="background-color:{{bgcolor}}">
        <view class="top">
          <view class="text"></view>
          <view class="yuan center">
            <view style="display: flex; flex-direction: column;">
              <view class="center">
                <image class="mark" src="{{mark}}"></image>
              </view>
              <text class="time">{{mon}} {{day}} {{weekd}} {{year}}</text>
            </view>
          </view>
          <view class="center timefloor">
            <text>{{min}} : {{sec}} </text>
          </view>
          <view @tap='floor' class="key center" wx:if="{{key==='开始' }}">
            <text>{{key}}</text>
          </view>
          <view class="key center" wx:else>
            <view @tap='floor' style="margin-right: 8%;">
              <text>{{key}}</text>
            </view>
            <view @tap='floorEnd' style="margin-left: 8%;">
              <text>{{End}}</text>
            </view>
          </view>
          <view>
            <text></text>
          </view>
        </view>
      </view>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy'

const secondsPerMin = 60
let timer = null

export default class Water extends wepy.page {
  config = {
    navigationBarTitleText: '归心'
  }
  data = {
    switch: true,
    showImg: true,
    mark: '../image/water.png',
    starPoint: [0, 0],
    curPoint: [0, 0],
    bgcolor: 'rgba(0, 255, 255, 0.3)',
    node: '3',
    month: '',
    mon: '',
    day: '',
    week: '',
    weekd: '',
    year: '',
    min: 20,
    sec: '00',
    add: 0,
    tick: 0,
    key: '开始',
    End: '结束'
  }
  methods = {

    touchstart(e) {
      let self = this
      self.starPoint = [e.touches[0].pageX, e.touches[0].pageY]
    },
    touchmove(e) {
      let self = this
      if (self.switch) {
        self.curPoint = [e.touches[0].pageX, e.touches[0].pageY]
        let xchange = self.curPoint[0] - self.starPoint[0]
        let ychange = self.curPoint[1] - self.starPoint[1]
        if (self.curPoint[0] >= self.starPoint[0]) {
          if (Math.abs(xchange) >= Math.abs(ychange)) {
          } else {
            if (self.curPoint[1] >= self.starPoint[1]) {
              if (self.min === '∞') {
                self.min = 60
                self.sec = '00'
              } else {
                if (self.min > 0) {
                  self.add = self.add + 1
                  if (self.add === 5) {
                    self.min--
                    self.add = 0
                    self.min = self.min < 10 ? '0' + self.min.toString() : self.min
                    self.tick = self.min * secondsPerMin + self.sec * 1
                  }
                } else {
                  self.min = '00'
                }
              }
            } else {
              if (self.min < 60) {
                self.add = self.add + 1
                if (self.add === 5) {
                  self.min++
                  self.add = 0
                  self.min = self.min < 10 ? '0' + self.min.toString() : self.min
                  self.tick = self.min * secondsPerMin + self.sec * 1
                }
              } else {
                self.min = '∞'
                self.sec = '∞'
              }
            }
          }
        } else {
          if (Math.abs(xchange) >= Math.abs(ychange)) {
          } else {
            if (self.curPoint[1] >= self.starPoint[1]) {
              if (self.min === '∞') {
                self.min = 60
                self.sec = '00'
              } else {
                if (self.min > 0) {
                  self.add = self.add + 1
                  if (self.add === 5) {
                    self.min--
                    self.add = 0
                    self.min = self.min < 10 ? '0' + self.min.toString() : self.min
                    self.tick = self.min * secondsPerMin + self.sec * 1
                  }
                } else {
                  self.min = '00'
                }
              }
            } else {
              if (self.min < 60) {
                self.add = self.add + 1
                if (self.add === 5) {
                  self.min++
                  self.add = 0
                  self.min = self.min < 10 ? '0' + self.min.toString() : self.min
                  self.tick = self.min * secondsPerMin + self.sec * 1
                }
              } else {
                self.min = '∞'
              }
            }
          }
        }
      }
    },

    touchend(e) {
      let self = this
      if (self.switch) {
        let xchange = self.curPoint[0] - self.starPoint[0]
        let ychange = self.curPoint[1] - self.starPoint[1]

        if (self.curPoint[0] >= self.starPoint[0]) {
          if (Math.abs(xchange) >= Math.abs(ychange)) {
            self.add = self.add + 1
            if (self.add === 4) {
              switch (self.node) {
                case '1':
                  break
                case '2':
                  self.mark = '../image/gold.png'
                  self.node = '1'
                  self.bgcolor = 'rgba( 255, 255, 0, 0.3)'
                  break
                case '3':
                  self.mark = '../image/tree.png'
                  self.node = '2'
                  self.bgcolor = 'rgba( 0, 255, 0, 0.3)'
                  break
                case '4':
                  self.mark = '../image/water.png'
                  self.node = '3'
                  self.bgcolor = 'rgba(0, 255, 255, 0.3)'
                  break
                case '5':
                  self.mark = '../image/fire.png'
                  self.node = '4'
                  self.bgcolor = 'rgba( 255, 0, 0, 0.3)'
                  break
              }
              self.add = 0
            }
          } else {
            if (self.curPoint[1] >= self.starPoint[1]) {
            } else {
            }
          }
        } else {
          if (Math.abs(xchange) >= Math.abs(ychange)) {
            self.add = self.add + 1
            if (self.add === 4) {
              switch (self.node) {
                case '1':
                  self.mark = '../image/tree.png'
                  self.node = '2'
                  self.bgcolor = 'rgba( 0, 255, 0, 0.3)'
                  break
                case '2':
                  self.mark = '../image/water.png'
                  self.node = '3'
                  self.bgcolor = 'rgba(0, 255, 255, 0.3)'
                  break
                case '3':
                  self.mark = '../image/fire.png'
                  self.node = '4'
                  self.bgcolor = 'rgba( 255, 0, 0, 0.3)'
                  break
                case '4':
                  self.mark = '../image/soil.png'
                  self.node = '5'
                  self.bgcolor = 'rgba( 238, 99, 99, 0.3)'
                  break
                case '5':
                  break
              }
              self.add = 0
            }
          } else {
            if (self.curPoint[1] >= self.starPoint[1]) {
            } else {
            }
          }
        }
      }
    },

    floor() {
      let self = this
      if (timer) {
        clearInterval(timer)
      }
      if (self.key === '开始' || self.key === '继续') {
        let self = this
        timer = setInterval(() => {
          self.tick--
          console.log(self.data.tick)
          if (self.tick !== -1) {
            let minutes = Math.floor((self.tick / secondsPerMin))
            self.min = minutes < 10 ? '0' + minutes.toString() : minutes
            self.setData({
              min: self.min
            })
            let second = self.tick % secondsPerMin
            self.sec = second < 10 ? '0' + second.toString() : second
            self.setData({
              sec: self.sec
            })
          } else {
            clearInterval(timer)
          }
          console.log(self.tick, self.min, self.sec)
        }, 1000)
        self.key = '暂停'
        self.switch = false
      } else {
        self.key = '继续'
        clearInterval(timer)
      }
    },
    floorEnd() {
      let self = this
      clearInterval(timer)
      self.min = '20'
      self.sec = '00'
      self.key = '开始'
      self.switch = true
      console.log(self.switch)
    }
  }
  onShareAppMessage() {
    return {
      title: '归心',
      desc: '都市喧闹 何处归心',
      path: '/page/noise'
    }
  }

  onLoad() {
    let date = new Date()
    let self = this
    self.tick = self.min * secondsPerMin
    const weeks = ['Sun', 'Mon', 'Tues', 'Wed', 'Thur', 'Fri', 'Sat']
    self.week = date.getUTCDay()
    self.weekd = weeks[self.week]
    self.month = date.getMonth()
    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']
    self.mon = months[self.month]
    self.day = date.getDate()
    self.year = date.getFullYear()

    setTimeout(() => {
      self.showImg = false
      self.setData({
        showImg: false
      })
    }, 2000)
    wepy.request({
      url: 'http://127.0.0.1:7001/voice/list',
      success: function (res) {
        console.log(res)
      }
    })
  }
}
</script>
