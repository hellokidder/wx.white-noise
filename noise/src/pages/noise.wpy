<style lang="less">
  .position{
    position: fixed;
    bottom: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    background-image: url('https://timgsa.baidu.com/timg?image&quality=80&size=b10000_10000&sec=1507874324&di=35d625e5e928c9af293703f3d4d90732&src=http://img4.duitang.com/uploads/item/201409/09/20140909211122_wWVay.png');
    background-size: 100% 100%;
  }
  .markposition{
    position: fixed;
    bottom: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  .top{
    position: fixed;
    bottom: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  .mark{
    width: 80px;
    height: 80px;
  }
  .text{
    width: 100%;
    height: 10%;
  }
  .yuan{
    width: 200px;
    height: 200px;
    border: 1px solid white;
    border-radius: 100px;
  }
  .center{
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .time{
    color: white;
    border-bottom: 1px solid white;
    border-top: 1px solid white;
    margin-top: 20%;
  }
  .timefloor{
    margin-top: 7%;
    color: white;
    font-size: 20px;
  }
</style>
<template>
  <view>
    <view wx:if="{{showImg}}">
      <image src="../image/bg.jpeg" class="top"></image>
    </view>
    <view wx:else class="position" @touchstart="touchstart" @touchmove="touchmove" @touchend="touchend">
      <view class="markposition" style="background-color:{{bgcolor}}">
        <view class="top">  
          <view class="text"></view>
            <view class="yuan center">
              <view style="display: flex; flex-direction: column;">
                <view class="center"><image class="mark" src="{{mark}}"></image></view>
                <text class="time">{{mon}} {{day}} {{weekd}} {{year}}</text>
              </view>
            </view>
          <view class="center timefloor">
            <text>{{min}} : {{sec}} </text>
          </view>
          <view @tap='floor'>
            <text>Start</text>
          </view>
          <view>
            <text></text>
          </view>
        </view>
      </view>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy'

const secondsPerMin = 60

export default class Water extends wepy.page {
  config = {
    navigationBarTitleText: '归心'
  }
  data = {
    showImg: true,
    mark: '../image/water.png',
    starPoint: [0, 0],
    curPoint: [0, 0],
    bgcolor: 'rgba(0, 255, 255, 0.3)',
    node: '3',
    month: '',
    mon: '',
    day: '',
    week: '',
    weekd: '',
    year: '',
    min: 20,
    sec: '00',
    add: 0,
    tick: 0
  }
  methods = {
    touchstart(e) {
      let self = this
      self.starPoint = [e.touches[0].pageX, e.touches[0].pageY]
    },
    touchmove(e) {
      let self = this
      self.curPoint = [e.touches[0].pageX, e.touches[0].pageY]
      let xchange = self.curPoint[0] - self.starPoint[0]
      let ychange = self.curPoint[1] - self.starPoint[1]
      if (self.curPoint[0] >= self.starPoint[0]) {
        if (Math.abs(xchange) >= Math.abs(ychange)) {
        } else {
          if (self.curPoint[1] >= self.starPoint[1]) {
            self.add = self.add + 1
            if (self.add === 5) {
              self.min -- 
              self.add = 0
              self.min = self.min < 10 ? '0' + self.min.toString() : self.min
            }
          } else {
            self.add = self.add + 1
            if (self.add === 5) {
              self.min ++
              self.add = 0
              self.min = self.min < 10 ? '0' + self.min.toString() : self.min
            }
          }
        }
      } else {
        if (Math.abs(xchange) >= Math.abs(ychange)) {
        } else {
          if (self.curPoint[1] >= self.starPoint[1]) {
            self.add = self.add + 1
            if (self.add === 5) {
              self.min --
              self.add = 0
              self.min = self.min < 10 ? '0' + self.min.toString() : self.min
            }
          } else {
            self.add = self.add + 1
            if (self.add === 5) {
              self.min ++
              self.add = 0
              self.min = self.min < 10 ? '0' + self.min.toString() : self.min
            }
          }
        }
      }
    },

    touchend(e) {
      let self = this
      let xchange = self.curPoint[0] - self.starPoint[0]
      let ychange = self.curPoint[1] - self.starPoint[1]

      if (self.curPoint[0] >= self.starPoint[0]) {
        if (Math.abs(xchange) >= Math.abs(ychange)) {
          switch (self.node) {
            case '1':
              break
            case '2':
              self.mark = '../image/gold.png'
              self.node = '1'
              self.bgcolor = 'rgba( 255, 255, 0, 0.3)'
              console.log(self)
              break
            case '3':
              self.mark = '../image/tree.png'
              self.node = '2'
              self.bgcolor = 'rgba( 0, 255, 0, 0.3)'
              break
            case '4':
              self.mark = '../image/water.png'
              self.node = '3'
              self.bgcolor = 'rgba(0, 255, 255, 0.3)'
              break
            case '5':
              self.mark = '../image/fire.png'
              self.node = '4'
              self.bgcolor = 'rgba( 255, 0, 0, 0.3)'
              break
          }
        } else {
          if (self.curPoint[1] >= self.starPoint[1]) {
          } else {
          }
        }
      } else {
        if (Math.abs(xchange) >= Math.abs(ychange)) {
          switch (self.node) {
            case '1':
              self.mark = '../image/tree.png'
              self.node = '2'
              self.bgcolor = 'rgba( 0, 255, 0, 0.3)'
              break
            case '2':
              self.mark = '../image/water.png'
              self.node = '3'
              self.bgcolor = 'rgba(0, 255, 255, 0.3)'
              break
            case '3':
              self.mark = '../image/fire.png'
              self.node = '4'
              self.bgcolor = 'rgba( 255, 0, 0, 0.3)'
              break
            case '4':
              self.mark = '../image/soil.png'
              self.node = '5'
              self.bgcolor = 'rgba( 238, 99, 99, 0.3)'
              break
            case '5':
              break
          }
        } else {
          if (self.curPoint[1] >= self.starPoint[1]) {
          } else {
          }
        }
      }
    },

    floor() {
      let self = this
      self.tick = self.min * secondsPerMin
      let timer = setInterval(() => {
        self.tick --
        if (self.tick !== -1) {
          let minutes = Number((self.tick / secondsPerMin).toString().slice(0, 2))
          self.min = minutes < 10 ? '0' + minutes.toString() : minutes
          self.setData({
            min: self.min
          })
          let second = self.tick % secondsPerMin
          self.sec = second < 10 ? '0' + second.toString() : second
          self.setData({
            sec: self.sec
          })
        } else {
          clearInterval(timer)
        }
        console.log(self.tick, self.min, self.sec)
      }, 1000)
    }

  }
  onShareAppMessage() {
    return {
      title: '归心',
      desc: '都市喧闹 何处归心',
      path: '/page/noise'
    }
  }
  onLoad() {
    let date = new Date()
    let self = this
    self.tick = self.min * secondsPerMin
    self.week = date.getUTCDay()
    switch (self.week) {
      case 0:
        self.weekd = 'Sun'
        break
      case 1:
        self.weekd = 'Mon'
        break
      case 2:
        self.weekd = 'Tues'
        break
      case 3:
        self.weekd = 'Wed'
        break
      case 4:
        self.weekd = 'Thur'
        break
      case 5:
        self.weekd = 'Fri'
        break
      case 6:
        self.weekd = 'Sat'
        break
    }
    self.month = date.getMonth()
    switch (self.month) {
      case 0:
        self.mon = 'Jan'
        break
      case 1:
        self.mon = 'Feb'
        break
      case 2:
        self.mon = 'Mar'
        break
      case 3:
        self.mon = 'Apr'
        break
      case 4:
        self.mon = 'May'
        break
      case 5:
        self.mon = 'June'
        break
      case 6:
        self.mon = 'July'
        break
      case 7:
        self.mon = 'Aug'
        break
      case 8:
        self.mon = 'Sept'
        break
      case 9:
        self.mon = 'Oct'
        break
      case 10:
        self.mon = 'Nov'
        break
      case 11:
        self.mon = 'Dec'
        break
    }
    self.day = date.getDate()
    self.year = date.getFullYear()

    setTimeout(() => {
      self.showImg = false
      self.setData({
        showImg: false
      })
    }, 2000)
  }
}
</script>
