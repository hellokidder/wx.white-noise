<style lang="less">
.center {
  display: flex;
  justify-content: center;
  align-items: center;
}

.background {
  position: fixed;
  bottom: 0;
  width: 100%;
  height: 100%;
  background-image: url("http://www.smartestee.com/noise/bgImage.png");
  background-size: 100% 100%;
}

.markbackground {
  position: fixed;
  bottom: 0;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.top {
  position: fixed;
  bottom: 0;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.mark {
  font-size: 35px;
  color: white;
}

.blank {
  width: 100%;
  height: 10%;
}

.dates {
  color: white;
  border-bottom: 0.5px solid white;
  border-top: 0.5px solid white; 
  margin-top: 5%;
  font-size: 11px;
  font-weight: bold;
}

.circular {
  width: 200px;
  height: 200px;
  border: 2px solid rgba(255, 255, 255, 0.5);
  border-radius: 100px;
}

.buttonview {
  color: white;
  width: 100%;
  height: 30px;
  position: fixed;
  bottom: 20%;
}

.button {
  padding: 4px;
  width: 18%;
  border: 1px solid rgba(255, 255, 255, 0.5);
  border-radius: 20px;
  font-size: 18px;
  font-weight: 100;
}

.txt {
  border: 1px solid white;
  border-radius: 10px;
}

.nongli {
  color: white;
  font-size: 12px;
  margin-top: 20%;
}

.uplow {
  width: 10px;
  height: 10px;
}

.timer {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 0px;
  margin-top: 5%;
  color: white;
  font-size: 18px;
}

.tolow {
  position: fixed;
  bottom: 0;
  width: 100%;
  height: 20%;
}

.lowertext {
  color: rgba(255, 255, 255, 0.5);
  font-size: 12px;
  position: fixed;
  bottom: 10%;
  font-weight: 100;
  width: 100%;
}

.point {
  width: 15px;
  height: 15px;
}

.lowpoint {
  position: fixed;
  width: 100%;
  bottom: 5%;
}
.notice {
  position: fixed;
  background-color: red;
  width: 80%;
  height: 80%;
}

</style>
<template>
  <view>
    <view wx:if="{{showImge}}">
      <image src="http://10.0.0.101/noise/top.jpeg" class="top"></image>
    </view>
    <view wx:else class="background" @touchstart="touchstart" @touchmove="touchmove" @touchend="touchend">
      <view class="markbackground" style="background-color:{{node.bgcolor}}">
        <view class="top">
          <view class="blank"></view>
          <view class="circular center" style="background-color:{{circlecolor}};  box-shadow:0px 0px 20px {{shadowcolor}};">
            <view class="center" style="display: flex; flex-direction: column;">
              <view class="mark">
                <text>{{node.mark}}</text>
              </view>
              <view class="dates">
                <text>{{dates}}</text>
              </view>
              <view class="nongli">
                <text>{{lunar}}</text>
              </view>
            </view>
          </view>
          <view class="center timer">
            <view>
              <image src="../image/up.png" class="uplow"></image>
            </view>
            <view>
              <text>{{time}}</text>
            </view>
            <view>
              <image src="../image/low.png" class="uplow"></image>
            </view>
          </view>
          <view wx:if="{{startButton}}" @tap="start" class="center buttonview">
            <text class="button center">{{start}}</text>
          </view>
          <view wx:else class="center buttonview">
            <view wx:if="{{pauseOrContinue}}" @tap="pause" class="button center" style="margin-right: 8%;">
              <text>{{pause}}</text>
            </view>
            <view wx:else @tap="start" class="button center" style="margin-right: 8%;">
              <text>{{continues}}</text>
            </view>
            <view @tap="end" class="button center" style="margin-left: 8%;">
              <text>{{end}}</text>
            </view>
          </view>
          <view class="lowertext center">
            <text>跨过山水，我在这里拥抱你</text>
          </view>
          <view class="lowpoint center">
            <image src="../image/point.png" class="point" style="opacity: {{node.goldPoint}};"></image>
            <image src="../image/point.png" class="point" style="opacity: {{node.treePoint}};"></image>
            <image src="../image/point.png" class="point" style="opacity: {{node.waterPoint}};"></image>
            <image src="../image/point.png" class="point" style="opacity: {{node.firePoint}};"></image>
            <image src="../image/point.png" class="point" style="opacity: {{node.soilPoint}};"></image>
          </view>
        </view>
        <view class="notice" animation="{{animationData}}">
        </view>
      </view>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy'

const calendar = require('../pages/calendar.js')
const initialTimeText = '20 : 00'
const initialMin = 20
const secondsPerMin = 60
const xPos = 0
const yPos = 1
const changeTimePoint = 1
const changeImagePoint = 5
const timeUplimit = 3660
const timeLowlimit = 0
const loop = '∞'
const trueOpacity = 1
const falseOpacity = 0.3
const nodeWater = {
  mark: '雨水',
  bgcolor: 'rgba(0, 255, 255, 0.12)',
  noise: 'http://10.0.0.100/noise/water.mp3',
  imageNode: 'WATER',
  waterPoint: trueOpacity,
  treePoint: falseOpacity,
  goldPoint: falseOpacity,
  firePoint: falseOpacity,
  soilPoint: falseOpacity
}
const nodeGold = {
  mark: '寺钟',
  bgcolor: 'rgba( 255, 255, 0, 0.12)',
  noise: 'http://10.0.0.100/noise/gold.mp3',
  imageNode: 'GOLD',
  waterPoint: falseOpacity,
  treePoint: falseOpacity,
  goldPoint: trueOpacity,
  firePoint: falseOpacity,
  soilPoint: falseOpacity
}
const nodeTree = {
  mark: '森林',
  bgcolor: 'rgba( 0, 255, 0, 0.12)',
  noise: 'http://10.0.0.100/noise/tree.mp3',
  imageNode: 'TREE',
  waterPoint: falseOpacity,
  treePoint: trueOpacity,
  goldPoint: falseOpacity,
  firePoint: falseOpacity,
  soilPoint: falseOpacity
}
const nodeFire = {
  mark: '篝火',
  bgcolor: 'rgba( 255, 0, 0, 0.12)',
  noise: 'http://10.0.0.100/noise/fire.mp3',
  imageNode: 'FIRE',
  waterPoint: falseOpacity,
  treePoint: falseOpacity,
  goldPoint: falseOpacity,
  firePoint: trueOpacity,
  soilPoint: falseOpacity
}
const noiseSoil = {
  mark: '浪潮',
  bgcolor: 'rgba( 238, 99, 99, 0.12)',
  noise: 'http://10.0.0.100/noise/soil.mp3',
  imageNode: 'SOIL',
  waterPoint: falseOpacity,
  treePoint: falseOpacity,
  goldPoint: falseOpacity,
  firePoint: falseOpacity,
  soilPoint: trueOpacity
}

export default class Index extends wepy.page {
  config = {
    navigationBarTitleText: '归心'
  }
  data = {
    showImge: true,
    startButton: true,
    pauseOrContinue: true,
    touchmove: true,
    lunar: null,
    dates: null,
    time: null,
    tick: null,
    timer: null,
    listen: null,
    starPoint: [0, 0],
    curPoint: [0, 0],
    touches: [],
    changePoint: 0,
    node: nodeWater,
    start: '开始',
    pause: '暂停',
    continues: '继续',
    end: '结束',
    shadowcolor: '#333333',
    circlecolor: 'rgba( 0, 0, 0, 0)',
    animationData: {}
  }
  methods = {
    date(self) {
      let date = new Date()
      const weeks = ['Sun', 'Mon', 'Tues', 'Wed', 'Thur', 'Fri', 'Sat']
      const week = date.getUTCDay()
      const weekd = weeks[week]
      const month = date.getMonth()
      const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']
      const mon = months[month]
      const day = date.getDate()
      const year = date.getFullYear()
      self.dates = mon + ' ' + day + ' ' + weekd + ' ' + year
      let lunardate = calendar.solar2lunar(year, month + 1, day)
      const lunarMonths = ['正月', '贰月', '叁月', '肆月', '伍月', '陆月', '七月', '捌月', '玖月', '拾月', '拾壹月', '腊月']
      const lunarDays = ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十']
      if (lunardate.lDay <= 10) {
        self.lunarDay = '初' + lunarDays[lunardate.lDay - 1]
      } else if (lunardate.lDay > 10 && lunardate.lDay < 20) {
        self.lunarDay = '十' + lunarDays[lunardate.lDay - 11]
      } else if (lunardate.lDay > 20 && lunardate.lDay < 30) {
        self.lunarDay = '廿' + lunarDays[lunardate.lDay - 21]
      } else if (lunardate.lDay === 20) {
        self.lunarDay = '二十'
      } else if (lunardate.lDay === 30) {
        self.lunarDay = '三十'
      }
      self.lunar = '农历' + lunarMonths[lunardate.lMonth - 1] + self.lunarDay
    },
    start() {
      let self = this
      self.startButton = false
      self.pauseOrContinue = true
      self.touchmove = false
      self.circlecolor = self.node.bgcolor
      self.shadowcolor = self.node.bgcolor
      if (self.tick === timeLowlimit) {
      } else {
        self.methods.playnoise(self)
        self.methods.listen(self)
      }
      if (self.tick > timeLowlimit && self.tick < timeUplimit) {
        self.methods.time(self)
      }
    },
    pause() {
      let self = this
      self.pauseOrContinue = false
      wepy.pauseBackgroundAudio()
      self.circlecolor = 'rgba( 0, 0, 0, 0)'
      clearInterval(self.listen)
      clearInterval(self.timer)
    },
    end() {
      let self = this
      self.startButton = true
      self.touchmove = true
      wepy.stopBackgroundAudio()
      self.circlecolor = 'rgba( 0, 0, 0, 0)'
      self.shadowcolor = '#333333'
      clearInterval(self.listen)
      clearInterval(self.timer)
      self.time = initialTimeText
      self.tick = initialMin * secondsPerMin
    },
    playnoise(self) {
      wepy.playBackgroundAudio({
        dataUrl: self.node.noise,
        title: '123'
      })
    },
    // 倒计时 时间到
    time(self) {
      self.timer = setInterval(function() {
        self.tick--
        self.methods.setTime(self)
        console.log(self.tick)
        if (self.tick === timeLowlimit) {
          self.setData({
            circlecolor: 'rgba( 0, 0, 0, 0)',
            shadowcolor: '#333333',
            time: initialTimeText,
            startButton: true,
            tick: initialMin * secondsPerMin,
            touchmove: true
          })
          self.startButton = true
          self.touchmove = true
          self.time = initialTimeText
          self.tick = initialMin * secondsPerMin
          self.circlecolor = 'rgba( 0, 0, 0, 0)'
          self.shadowcolor = '#333333'
          wepy.stopBackgroundAudio()
          clearInterval(self.listen)
          clearInterval(self.timer)
        }
      }, 1000)
    },
    // 监听 音频停止时再起一个音频
    listen(self) {
      self.listen = setInterval(function() {
        if (self.tick !== timeLowlimit) {
          wepy.getBackgroundAudioPlayerState({
            success: function(res) {
              if (res.status !== 1) {
                self.methods.playnoise(self)
              }
            }
          })
        }
      }, 50)
    },
    touchstart(e) {
      let self = this
      self.starPoint = [e.touches[0].pageX, e.touches[0].pageY]
    },
    touchmove(e) {
      let self = this
      self.curPoint = [e.touches[0].pageX, e.touches[0].pageY]
      self.changePoint++
      if (self.touchmove) {
        self.methods.timeChange(self)
      }
    },
    touchend(e) {
      let self = this
      if (self.touchmove) {
        self.methods.imageChange(self)
      }
    },
    timeChange(self) {
      let xchange = self.curPoint[xPos] - self.starPoint[xPos]
      let ychange = self.curPoint[yPos] - self.starPoint[yPos]
      if (Math.abs(xchange) < Math.abs(ychange)) {
        if (self.changePoint > changeTimePoint) {
          if (self.curPoint[yPos] > self.starPoint[yPos] && self.tick > timeLowlimit) {
            // 向下滑
            self.tick = self.tick - secondsPerMin
            self.methods.setTime(self, self.tick)
            self.changePoint = 0
          }
          if (self.curPoint[yPos] < self.starPoint[yPos] && self.tick < timeUplimit) {
            // 向上滑
            self.tick = self.tick + secondsPerMin
            self.methods.setTime(self, self.tick)
            self.changePoint = 0
          }
        }
      }
    },
    // 刷新时间
    setTime(self) {
      let currentTime = self.methods.currentTime(self.tick)
      self.setData({
        time: currentTime
      })
      self.time = currentTime
    },
    // 计算时间格式
    currentTime(tick) {
      let min = (tick - (tick % secondsPerMin)) / secondsPerMin
      let sec = tick % secondsPerMin
      if (tick === timeUplimit) {
        return loop
      } else {
        if (min < 10) {
          min = '0' + min
        }
        if (sec < 10) {
          sec = '0' + sec
        }
        return min + ' : ' + sec
      }
    },
    imageChange(self) {
      let xchange = self.curPoint[xPos] - self.starPoint[xPos]
      let ychange = self.curPoint[yPos] - self.starPoint[yPos]
      if (Math.abs(xchange) > Math.abs(ychange)) {
        if (self.changePoint > changeImagePoint) {
          if (self.curPoint[xPos] > self.starPoint[xPos]) {
            // 向右划
            switch (self.node.imageNode) {
              case 'GOLD':
                break
              case 'TREE':
                self.node = nodeGold
                break
              case 'WATER':
                self.node = nodeTree
                break
              case 'FIRE':
                self.node = nodeWater
                break
              case 'SOIL':
                self.node = nodeFire
                break
            }
            self.changePoint = 0
          } else if (self.curPoint[xPos] < self.starPoint[xPos]) {
            // 往左划
            switch (self.node.imageNode) {
              case 'GOLD':
                self.node = nodeTree
                break
              case 'TREE':
                self.node = nodeWater
                break
              case 'WATER':
                self.node = nodeFire
                break
              case 'FIRE':
                self.node = noiseSoil
                break
              case 'SOIL':
                break
            }
            self.changePoint = 0
          }
        }
      }
    }
  }
  onShareAppMessage() {
    return {
      title: '归心',
      desc: '都市喧闹 何处归心',
      path: '/page/noise'
    }
  }
  onShow() {
    let self = this
    var animation = wx.createAnimation({
      duration: 8000,
      timingFunction: 'ease',
    })
    self.animation = animation
    animation.translateY(200)
    self.setData({
      animationData: animation.export()
    })
  }
  onLoad() {
    let self = this
    self.methods.date(self)
    setTimeout(() => {
      self.showImge = false
      self.setData({
        showImge: false
      })
    }, 5000)
    self.time = initialTimeText
    self.tick = initialMin * secondsPerMin
  }
}
</script>
